Public Sector: Open Source presentation
=======================================

November 21st, Sheffield Uni


Conference abstract
------------------- 
_Public Sector: Open Source_ is a conference for Public Sector executives, IT specialists and decision makers.
How can open source software help to provide major cost savings and meet demands for new services for citizens?


Conference URL
--------------
https://osepa.shef.ac.uk/


Notes from Saul
---------------
I was thinking of some stuff about the way that the OSS community is producing a huge number of new tools for software development and those tools are being used to make the software development process more effective (a virtuous cycle).

So we build on the Stallman era of emacs being OSS start getting CI servers, automated testing tool (ahem!) and even stuff for fast prototyping like Twitter Bootstrap and frameworks like Backbone.js

That was what was in my head, but you should take it anyway that you see fit.


Title
-----
Combining Open Source and agile delivery



Contents
--------

Introduction

Freedom

The Open Source community

Collaboration

Regular releases

Feedback

Overlap with the Agile community

Combining Open Source and agile in the public sector

In practice

Challenges

The future


Slide index
===========
[Slide: Front page]
[Slide: me, Technophobia]
[Slide: Free Software]
[Slide: Transition RMS]
[Slide: transition Gnu]
[Slide: transition Open Source]
[Slide: nerds in bedrooms]
[Slide: vendors I've worked with]
[Slide: web of collaboration]
[Slide: collaboration def]
[Slide: something collaborate-ey]
[Slide: feedback loop]  
[Slide: agile methodologies]
[Slide: Agile Manifesto]
[Slide: virtuous circle]
[Slide: Technophobia clients]
[Slide: LGSS stack]
[Slide: TSB arch diagram]
[Slide: SCC arch diagram]
[Slide: challenges]
[Slide: The future]



Introduction
============

[Slide: Front page]

Good afternoon.

My name is Rory Gibson. 

I'm a technical architect, a consultant, an Open Source developer, and an agile coach.

I work for Technophobia, a Sheffield-based software house. We focus on user experience, web development and the technical delivery of challenging projects. 

We often work in the Public Sector, either directly delivering new and updated systems, or helping our clients develop their digital vision and strategy.

[Slide: me, Technophobia]

Personally, that means that I spend a lot of time talking to new and existing clients about using Open Source software, making bespoke enhancements to Open Source software, and delivering projects, using that software, and usually in an agile way.
I get a lot of opportunities to talk to decision makers in public sector organisations, with an emphasis on the Local Authority space, and as a result I've ot a bit of an appreciation of the difficulties that can present themselves when introducing Open Source.


Freedom
=======
Now, this is a conference about Open Source in the Public Sector, and I'm sure there will be a number of presentations over the next 2 days that will directly address issues of policy, procurement and so forth.

I'm going to talk about something that's perhaps a little more general and abstract.

I've been around the Open Source community since before the term "Open Source" was coined, back when software developers, geeks, nerds and enthusiasts of all sorts were beginning to get excited about this thing called "Free Software".

[Slide: Free Software]

"Free Software", capitalised exactly so, is a term with a very specific meaning. 

Introduced by one Richard Stallman, [Slide: Transition RMS] "Free Software" means software that is "free as in speech, not free as in beer", and the emergence of this term, and the burgeoning movement behind it, presented a very significant change to the way that people started to think about software.

[Slide: transition Gnu]

Since "Free Software" appeared on the scene many derivative movements, terms and visions have come and gone, and "Open Source" is, broadly speaking, one of these.

[Slide: transition Open Source]

Even though it's often forgotten today, this direct link to the geeky, idealistic Free Software movement - and the benefits that it delivers - is at the heart of what I want to talk about today.


The Open Source community
=========================

The Free Software community is stereotypically depicted as being made up of ... well, nerds, coding in their bedrooms.

[Slide: nerds in bedrooms]

These days, Open Source encompasses a much wider definition.

There are a great number of heavyweght Open Source products and tools that can help you to deliver value to your customers and citizens. And there's a great deal of money to be made by businesses that follow a "commercial Open Source" model - making the source code of the software available under one OS license or another, and profiting by the provision of support or additional features.

[Slide: vendors I've worked with]

Many of these vendors - and I can single out a few that I've worked with, like Magnolia, Liferay, MySQL, JasperSoft and Canonical - appear almost indisinguishable from purely commercial vendors.

[Slide: web of collaboration]

But at the heart of it all, most Open Source projects are still rooted in code originally written by enthusiasts, working in loosely federated groups, often spread across continents, and collaborating together in ways that would have confounded the traditional software houses of the past.



Collaboration
=============
[Slide: collaboration def]
"Collaborating" is the important word here. 

The dictionary definition of "collaboration" is "to work jointly with others or together especially in an intellectual endeavor".

If you look at many enterprises, both public and private sector, there's often an emphasis on supporting collaboration with tooling.

We see a proliferation of software like Sharepoint, ostensibly designed to help people share documents and work together, but often so complex and difficult to configure that it ends up getting in the way, rather than supporting the emergence of new and better processes in the workplace.

[Slide: something collaborate-ey]

Contrast this with the typical Open Source project; supported by mailing lists, Internet Relay Chat sessions, ad-hoc wiki pages, forums, and open-access distributed revision control systems like Git, usually allowing anonymous read access for any interested party.

The use of these more free-form tools actively promotes people talking to each other, working more closely together, and pulling together in the same direction - creating working software.


Regular releases
================
Simply, Open Source software development is, by nature, conducted in the open. 

In general, the development of the product is transparent, and anyone who wants to can gain access to the latest state of the software, simply by cloning it from Github, downloading it, or checking it out from a public Subversion repository.

It's a natural result of this openness that, in order to maintain the reputation of the projects, the teams working on them tend to release their software regularly. 

This frequency of formal release, and the transparency of the systems in use, leads to a very short feedback loop; the team releases a new version (or closes a bug in a public tracker), and real users very quickly obtain the latest version, try it out, and are free to raise new defects, suggest enhancements - or develop them themselves and release them into the wild for the benefit of all.

[Slide: feedback loop]

Cyclica processes are often said to follow the "PDCA" system, first laid out by W. Edwards Deming.

In essence, you 
 * Plan a piece of work
 * Do the work
 * Check whether the results are what you expected
 * Act on the results
 * ... and repeat

It's the speed of this feedback loop, and the ease with which interested parties can engage with the community, that drives the adoption of many Open Source projects, and contributes to the growth of their communities.

And it's the speed of the feedback loop that delivers real, tangible benefits to the users over time.
They can and will receive new functionality very quickly as it's created - no waiting for 12 month vendor release schedules.

[Slide: agile methodologies]

And here we start to see parallels with another major new force in the software world in the last 20 years; agile software development methodologies.


Overlap with the Agile community
================================

It's no accident that proponents of agile methods are also often proponents of Open Source or Free Software.

If I can be so bold as to paraphrase the Agile Manifesto - the original written definition of what makes a methodology agile - then:

[Slide: Agile Manifesto]

We value:
 * Individuals and interactions over processes and tools
 * Working software over comprehensive documentation
 * Customer collaboration over contract negotiation
 * Responding to change over following a plan

Who here can look at those four elements and not see the parallels with the Open Source community?

In the main, Agile methods are all about delivering the software that customers need, when they need it, rather than what they said they needed a year ago. 

The techniques that we use to deliver in an agile way are all, really, about collaboration and communication in one way or another.
 * Talking to your customer more
 * Demonstrating real, running features
 * Getting feedback from the customer
 * Automating error-prone delivery processes (like integrating and building software)
 * Low-level code and design reviews (through techniques like pair programming)

It's only natural that a community that embraces communication and working together should also embrace software that's built on the same principles.

The vast majority of software that supports the agile ecosystem - story tracking tools, continuous integration tools, distributed version control systems - is Open Source. The communities overlap significantly.

[Slide: virtuous circle]

This overlap, and the joint emphasis on feedback, collaboration and iteration, creates a virtuous circle, where the processes in use enhance the tools, and the tools are used by the kinds of people that understand the processes.


Combining Open Source and agile in the public sector
====================================================
I would guess that most of us here understand the benefits of Open Source to the public sector - in terms of (potentially) lower cost, reduced risk of vendor lock-in, the ability to take advantage of community-sourced enhancements and support, and so on.

Similarly, the benefits of agile - early delivery of value to stakeholders, the ability to alter the requirements backlog during the delivery phase without incurring excessive cost, increased quality, improved stakeholder engagement and all the rest - are well documented and widely discussed.

Where I see an opportunity for increased understanding, is in what happens when you mix the two.

I've seen many risk averse organisations. To my eyes, risk should be analysed, quantified and mitigated, but sadly it's very common for the adoption of Open Source, or, for that matter, Agile, to be labelled as "risky" without real analysis or understanding - which is why I'm sure many of the attendees here will agree it can be an uphill battle to introduce Open Source, despite the benefits we can demonstrate.

A culture that supports the introduction and usage of Open Source software tends to imply a culture that is open to discussing, analysing and making technical decisions on merit and the basis of evidence, rather than blind adherence to policy.

This is precisely the sort of culture where an agile approach may flourish. 


In practice
===========

We at Technophobia have had great success in the Public Sector with introducing solutions based on these two pillars; Open Source and agile methodologies.

[Slide: Technophobia clients]

Our usage of agile - whether vanilla Scrum, or an adapted hybrid process designed to play nicely inside the Prince2 framework - has enabled us to work closely with clients including the Driving Standards Agency, the Technology Strategy Board, the Criminal Records Bureau and Sheffield City Council. 

In each of these projects we've used Open Source software; our development toolchain, our integration platforms, our hosting solutions, the content management system we use and the tools we use to collaborate with the clients are all Open Source.

In development, we use a great many tools and libraries, and of those, well over 90% are Open Source, and most of those are Free, at least as in beer.

[Slide: LGSS stack]

As an example, for my most recent project, which was delivered in 3 weeks from start to finish, my team developed a case management system for a client in the property industry. Every single piece of software, from the virtualisation software on the hosting platform, through the OS, database, application framework and development tools, was Open Source.

Even during the User Experience phase, we used the Twitter Bootstrap framework to deliver a flexible UI prototype, in preference to using Photoshop or other proprietary software to deliver graphical concepts.

[Slide: TSB arch diagram]

As a larger scale example, for the Technology Strategy Board, we employed a hybrid lean & agile process to deliver a platform based on social networking technology and the Liferay Portal Server, hosted on an entirely Open Source stack. This project has now been running for four years and over 20 releases to production.

[Slide: SCC arch diagram]

For Sheffield City Council, we delivered a content managed web platform based around Magnolia CMS, hosted on Ubuntu; in this case we didn't host the final solution, but worked with Capita IT Services, one of the UK's largest traditional systems integrators, to help them skill up in Magnolia, Ubuntu, Tomcat, Rabbit MQ and the other Open Source technologies we employed.

This project was delivered using the Scrum agile framework, working closely and iteratively with the Council - a traditionally very risk-averse, Big IT-centric and slow-moving institution. We used Open Source software and agile techniques together to rapidly deliver a working system, whilst also educating the Council about the benefits of agile - so much so that they're now running their own gile projects without external involvement.

During the Sheffield City Council project, and later projects, we've started working with the Government Digital Service, who are breaking new ground in the rapid delivery of low-cost, user-centric services in the central government space.
Through working with them, we've realised that the ways of working we've promoted within our client base are very much in line with those of GDS - regular releases, agile techniques, and a reliance on Open Source software wherever it makes sense - which is most places!


Challenges
==========

[Slide: challenges]

In some cases, we've exprienced push-back from clients on our use of Open Source technologies. 

This has often centred around supportability; our answer has been that if we're hosting the platform, we'll support the technology and back off the risk ourselves as appropriate, and if we're not hosting it, we'll work with you to train and equip your teams to manage the solution in Business As Usual.

Sometimes we've been asked if Open Source software is somehow "less secure" - that's an easy one to deal with, as there are numerous peer reviewed studies giving empirical evidence to the contrary.

And sometimes we've been told that the organisation simply has a principle of using Commercial Off The Shelf Software ... we can remedy that by recommending any of the excellent commercial Open Source vendors we work with, from Liferay to MySQL and Magnolia CMS.


The future
==========
[Slide: The future]

Projects like the ones we've conducted with local authorities and the ongoing work of the Government Digital Service are pointing the way; to where decisions are taken on the basis of empirical evidence, and where lightweight procurement processes, combined with robust knowledge of the realities of IT implementation - rather than the rosy picture painted by traditional vendors - are used to engage suppliers who can really deliver.

I believe that the collaborative, transparent nature of agile delivery, combined with the benefits of Open Source software, opens up a brighter future for public sector IT projects. 

By introducing realistic analysis of the benefits and risks of these approaches, we can work to educate  the Public Sector that it's possible to have solutions that are cheap to build, cheap to run, and deliver to the end users on an ongoing basis, without tying ourselves to vendor lifecycles that could limit our flexibility.

In a world of changing regulatory and political landscapes, using Open Source software, delivered in an agile way, will mean we can serve our customers - even if we don't know now, what we'll need later.

